부모타입 예외는 아래쪽에 위치시켜야 한다. 아니면 오류가 난다.

checked 예외 - try catch 필수
uncheked 예외 - try catch 필수 아님

상속을 Runtime 인지 그냥 Exception 알아야 한다. 그래야 try catch를 강요하는지
그냥 실행하는지 이렇게 나눠지기 때문이다.

예외를 만들수 있다. 객체 형태로.

runtime 예외는 throws를 생략할수 있다.

예외도 객체로 주고받는다.


StringTokenizer 에서 자른 값 가져오는건 st.nextToken();이다
이때 토큰 개수보다 더 많으면 예외상황발생된다.
그래서 while(st.hasMoreElements())을쓴다.


trim(); 좌우 공백 제거한 문자열 반환한다. 예를 들어서 (    가   나  다  )
가 되면 (가   나  다) 이렇게 나올것이다.


Arraylist는 capacity가 있고 기본적으로 10칸의 배열이 잇다. 그래서 길이는 10인 배열이 있는데
늘어나면 더 늘어나고 줄어들면 더 줄어들게 하는 것을 명시적으로 보여주기 위해서 size라는 메소드를 쓴다.

ArrayList는 generic으로 반환 값을 정할 수 있으며
List라는 인터페이스를 상속하고 있다.

ArrayList는 
배열의 길이가 정해지지 않은 배열이다.
값을 추가 할 수 있다. add로 가능하다.
index를 가진다. 추가하는 값들은 index가 순서대로 지정된다.
값을 출력 할 수 있다. get으로 가능하다.

List는 삭제

ArrayList의 데이터를 모두 출력할려면 for-each루프를 사용하는것이 좋다.
for (String s : list)
	System.out.println(s);

Scanner는 하나의 공간을 가진다. 그리고 그 공간은 값이 입력되면 초기화가 되지 않은 이상 계속 그 값을
가진다. 앞서 scan.nextLine();을 한 후 scan.nextInt();를 하면 mismatch 예외가 일어난 적이
있을 것이다 . 그것 또한 scan에서 enter가 입력되어 오류난 것인데 이번 오류는 비슷하게
계속 scan의 값에 문자열이 저장 되어있어서 try catch가 계속 일어 난 것이다. 그래서
enter먹여준 것 처럼 scan.nextLine();을 해야 한다.